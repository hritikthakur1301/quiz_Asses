<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reading Fill in the Blanks Quiz</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .draggable { cursor: move; user-select: none; }
        .blank { min-width: 100px; min-height: 30px; border: 2px dashed #ccc; display: inline-block; vertical-align: middle; margin: 0 5px; }
        .blank.hover { background-color: #f0f0f0; border-style: solid; }
        .word-bank-item { transition: all 0.3s ease; }
        .word-bank-item.dragging { opacity: 0.5; }
        .correct { background-color: #86efac !important; }
        .incorrect { background-color: #fca5a5 !important; }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto p-4 max-w-4xl">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="bg-amber-600 text-white p-4 rounded-t-lg mb-6 flex justify-between items-center">
                <h1 class="text-xl font-bold">READING FILL IN THE BLANKS</h1>
                <select id="question-select" class="bg-white text-black px-4 py-2 rounded"></select>
            </div>
            <div class="flex justify-between items-center mb-6">
                <h2 id="question-title" class="text-lg font-semibold"></h2>
                <div class="flex items-center gap-4">
                    <span class="text-gray-600">Label</span>
                    <div class="border rounded px-3 py-1">Time Spent: <span id="timer">10:00</span></div>
                </div>
            </div>
            <p class="text-gray-600 mb-6">In the text below some words are missing. Drag the correct words from below given words to the appropriate place in the text.</p>
            <div id="question-text" class="text-gray-700 leading-relaxed mb-6"></div>
            <div id="word-bank" class="flex flex-wrap gap-2 p-4 bg-emerald-100 rounded-lg mb-6"></div>
            <div class="flex justify-between">
                <button id="prev-btn" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700">Previous</button>
                <button id="submit-btn" class="bg-amber-600 text-white px-4 py-2 rounded hover:bg-amber-700">Submit</button>
                <button id="next-btn" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700">Next</button>
            </div>
        </div>
    </div>
    <script>
        let quizData = [];
        let currentIndex = 0;
        let userAnswers = {};
        let timeLeft = 600;
        let timerInterval;

        async function fetchQuizData() {
            try {
                const response = await fetch("/api/quiz");
                const data = await response.json();
                quizData = data.questions;
                timeLeft = data.time_limit;
                populateDropdown();
                renderQuiz();
                startTimer();
            } catch (error) {
                console.error("Error fetching quiz data:", error);
            }
        }

        function startTimer() {
            clearInterval(timerInterval);
            timerInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    alert("Time is up! Submitting your answers...");
                    document.getElementById("submit-btn").click();
                    return;
                }
                timeLeft--;
                let minutes = Math.floor(timeLeft / 60);
                let seconds = timeLeft % 60;
                document.getElementById("timer").textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        function populateDropdown() {
            const dropdown = document.getElementById("question-select");
            dropdown.innerHTML = "";
            quizData.forEach((question, index) => {
                const option = document.createElement("option");
                option.value = index;
                option.textContent = `Question ${index + 1}`;
                dropdown.appendChild(option);
            });
            dropdown.addEventListener("change", (e) => {
                currentIndex = parseInt(e.target.value);
                renderQuiz();
            });
        }

        document.getElementById("submit-btn").addEventListener("click", () => {
            let results = quizData.map((question, qIndex) => {
                return {
                    title: question.title,
                    text: question.text,
                    correct_answers: question.correct_answers,
                    userAnswers: question.correct_answers.map((_, aIndex) => userAnswers[`${qIndex}-${aIndex}`] || "(empty)")
                };
            });
            localStorage.setItem("quizResults", JSON.stringify(results));
            window.location.href = "/results";
        });

        fetchQuizData();
    </script>
</body>
</html>