<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reading Fill in the Blanks Quiz</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .draggable {
        cursor: move;
        user-select: none;
      }
      .blank {
        min-width: 100px;
        min-height: 30px;
        border: 2px dashed #ccc;
        display: inline-block;
        vertical-align: middle;
        margin: 0 5px;
      }
      .blank.hover {
        background-color: #f0f0f0;
        border-style: solid;
      }
      .word-bank-item {
        transition: all 0.3s ease;
      }
      .word-bank-item.dragging {
        opacity: 0.5;
      }
    </style>
  </head>
  <body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto p-4 max-w-4xl">
      <div class="bg-white rounded-lg shadow-lg p-6">
        <div
          class="bg-amber-600 text-white p-4 rounded-t-lg mb-6 flex justify-between items-center"
        >
          <h1 class="text-xl font-bold">READING FILL IN THE BLANKS</h1>
          <select
            id="question-select"
            class="bg-white text-black px-4 py-2 rounded"
          ></select>
        </div>
        <div class="flex justify-between items-center mb-6">
          <h2 id="question-title" class="text-lg font-semibold"></h2>
          <div class="border rounded px-3 py-1">
            Time Left: <span id="timer">10:00</span>
          </div>
        </div>
        <p class="text-gray-600 mb-6">
          Drag and drop the correct words into the blanks below.
        </p>
        <div
          id="question-text"
          class="text-gray-700 leading-relaxed mb-6"
        ></div>
        <div
          id="word-bank"
          class="flex flex-wrap gap-2 p-4 bg-emerald-100 rounded-lg mb-6"
        ></div>
        <div class="flex justify-between">
          <button
            id="prev-btn"
            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700"
          >
            Previous
          </button>
          <button
            id="submit-btn"
            class="bg-amber-600 text-white px-4 py-2 rounded hover:bg-amber-700"
          >
            Submit
          </button>
          <button
            id="next-btn"
            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700"
          >
            Next
          </button>
        </div>
      </div>
    </div>

    <script>
      let quizData = [];
      let currentIndex = 0;
      let userAnswers = {};

      async function fetchQuizData() {
        try {
          const response = await fetch('/api/quiz');
          const data = await response.json();
          quizData = data.data;
          populateDropdown();
          renderQuiz();
        } catch (error) {
          console.error('Error fetching quiz data:', error);
        }
      }

      function populateDropdown() {
        const dropdown = document.getElementById('question-select');
        dropdown.innerHTML = '';
        quizData.forEach((question, index) => {
          const option = document.createElement('option');
          option.value = index;
          option.textContent = `Question ${index + 1}`;
          dropdown.appendChild(option);
        });
        dropdown.addEventListener('change', (e) => {
          saveCurrentAnswers();
          currentIndex = parseInt(e.target.value);
          renderQuiz();
        });
      }

      function renderQuiz() {
        const question = quizData[currentIndex];
        document.getElementById('question-title').innerText = question.title;
        document.getElementById('question-text').innerHTML = formatQuestionText(
          question.text,
          question.correct_answers.length
        );
        document.getElementById('word-bank').innerHTML = question.options
          .map(
            (word) =>
              `<div class='word-bank-item draggable bg-emerald-500 text-white px-3 py-1 rounded cursor-move' draggable='true'>${word}</div>`
          )
          .join('');

        document.getElementById('question-select').value = currentIndex;
        restorePreviousAnswers();
        initializeDragAndDrop();
      }

      function formatQuestionText(text, numBlanks) {
        let blankIndex = 0;
        return text.replace(
          /___/g,
          () => `<span class="blank" data-index="${blankIndex++}"></span>`
        );
      }

      function initializeDragAndDrop() {
        let draggingElement = null;

        document.querySelectorAll('.draggable').forEach((draggable) => {
          draggable.addEventListener('dragstart', (e) => {
            draggingElement = e.target.textContent;
            e.dataTransfer.setData('text', draggingElement);
          });
        });

        document.querySelectorAll('.blank').forEach((blank) => {
          blank.addEventListener('dragover', (e) => e.preventDefault());
          blank.addEventListener('drop', (e) => {
            e.preventDefault();
            if (draggingElement) {
              blank.textContent = draggingElement;
              userAnswers[`${currentIndex}-${blank.dataset.index}`] =
                draggingElement;
            }
          });
        });
      }

      function saveCurrentAnswers() {
        document.querySelectorAll('.blank').forEach((blank) => {
          userAnswers[`${currentIndex}-${blank.dataset.index}`] =
            blank.textContent.trim();
        });
      }

      function restorePreviousAnswers() {
        document.querySelectorAll('.blank').forEach((blank) => {
          let answer = userAnswers[`${currentIndex}-${blank.dataset.index}`];
          if (answer) blank.textContent = answer;
        });
      }

      function submitAnswers() {
        saveCurrentAnswers();

        let formattedAnswers = quizData.map((question, qIndex) => ({
          questionId: qIndex + 1,
          answers: question.correct_answers.map(
            (_, aIndex) => userAnswers[`${qIndex}-${aIndex}`] || '(empty)'
          ),
        }));

        fetch('/submit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ answers: formattedAnswers }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              window.location.href = data.redirect;
            } else {
              alert('Submission failed. Please try again.');
            }
          })
          .catch((error) => {
            alert('An error occurred. Please try again.');
          });
      }

      document.getElementById('next-btn').addEventListener('click', () => {
        if (currentIndex < quizData.length - 1) {
          saveCurrentAnswers();
          currentIndex++;
          renderQuiz();
        }
      });

      document.getElementById('prev-btn').addEventListener('click', () => {
        if (currentIndex > 0) {
          saveCurrentAnswers();
          currentIndex--;
          renderQuiz();
        }
      });

      document
        .getElementById('submit-btn')
        .addEventListener('click', submitAnswers);

      fetchQuizData();
    </script>
  </body>
</html>
